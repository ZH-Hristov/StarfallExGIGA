_G.KBBE = {
    Objs = {GuardSpawns = {}},
    NPCs = {},
    Guns = {
        USP = {
            sv = function(ply)
                ply:fireBullets({Force = 15, Damage = 15, Src = ply:getEyePos(), Dir = ply:getAimVector(), IgnoreEntity = ply})
            end,
            
            cl = {
                maxclip = 9,
                clip = 9,
                shootsnd = "weapons/usp/usp1.wav",
                ammotype = "light",
                
                vmholos = {{Vector(), Angle(), "models/weapons/cstrike/c_pist_usp.mdl"}}
            }
        },
    },
    
    Loadout = {
        Guns = {
            [1] = "USP"
        }
    }    
}

if SERVER then
    function KBBE.setSong(str)
        if currentSong then
            local oldSong = currentSong
            oldSong:setVolume(0, 1)
            timer.simple(1, function() oldSong:destroy() end)
        end
        
        if str then
            currentSong = sounds.create(ply, str, true)
            currentSong:play()
        end
    end

    function KBBE.startExtractionPhase()
        AddCoTask("ExtractionPhase", function()
            coroutine.wait(3)
            KBBE.setSong("eranthis/event_finale_l4d1.ogg")
            local arriveTime = math.random(30, 60)
            
            net.start("KBBE_BreenDeadCL")
            net.writeInt(arriveTime, 8)
            net.send(entity(1))
    
            timer.create("HelicopterArrive", arriveTime, 1, function()
                local heliSpawn = KBBE.Objs.HelicopterSpawn
                heli = holograms.create(heliSpawn[1] + Vector(0, 0, 2000), heliSpawn[2], "models/Combine_Helicopter.mdl", Vector(0.001))
                heli:setAnimation("idle")
                heli:emitSound("vehicles/chopper_rotor2.wav")
                
                AddTween("HelicopterArriveAnim", {scale = 0.001, pos = heli:getPos()}, {scale = 1, pos = heliSpawn[1]}, 5, KBBE.heliArrived, math.easeOutSine, function(dat)
                    heli:setPos(dat.pos)
                    heli:setScale(Vector(dat.scale))
                end)
            end)
            
            return true
        end)
    end
    
    function KBBE.heliArrived()
        heli.trigger = trigger.createSphere(heli:getPos(), 300, "player", KBBE.enterHeliArea, KBBE.exitHeliArea)
        heli.trigger:setParentEx(heli)
        KBBE.setSong()
    end
    
    function KBBE.enterHeliArea()
        KBBE.extract()
    end
    
    function KBBE.exitHeliArea()
        
    end
    
    function KBBE.extract()
        heli.trigger:remove()
        heli:remove()
        net.start("KBBE_ExtractCL")
        net.send(entity(1))
    end

    function KBBE.spawnBreen(pos)
        _G.CurBreen = nextbot.create(pos, "models/player/breen.mdl")
        CurBreen:setHealth(50)
        
        CurBreen:addDeathCallback("breenyDeath", function()
            KBBE.startExtractionPhase()
        end)
    end
    
    local garEnum = {
        UNALERTED = 1,
        COMBAT = 2,
        CAUTIOUS = 3,
        MOVINGTOTURRET = 4,
        PLACINGTURRET = 5
    }
    
        garStateThinkers = {
        -- Unalerted
        [1] = function(self)
            if self.plyInVis then
                if self:getDetection() >= 50 then
                    self:removeGotoPos()
                    self:faceTowards(ply:getPos())
                end
                
                if self:traceToPlayer() then
                    self:setDetection(self:getDetection() + 1)
                    print(self:getDetection())
                    if self:getDetection() >= 100 then
                        self.lastKnownPos = ply:getPos()
                        self:setState(garEnum.COMBAT)
                        self:emitSound("npc/combine_soldier/vo/contactconfirmprosecuting.wav")
                    end
                end
            else
                self:setDetection(self:getDetection() - 1)
            end
            
            if self.patrolRoute then
                
            else
                if timer.curtime() >= self.randomNavTick then
                    self.randomNavTick = timer.curtime() + 10
                    local closest = navmesh.getNearestNavArea(self:getPos(), 1000)
                    if closest then
                        self:setGotoPos(closest:getRandomPoint())
                    end
                else
                    
                end
            end
            
        end,
        
        -- Combat
        [2] = function(self)
            self:faceTowards(self.lastKnownPos)
            
            if self.plyInVis and self:traceToPlayer() then -- Can see, move close and shoot if visible.
                self:setDetection(100)
                self.lastKnownPos = Vector(ply:getPos().x, ply:getPos().y, self:getPos().z)
                self.reachedLastKnown = false
                
                if self:getPos():getDistanceSqr(self.lastKnownPos) > 150000 then
                    self:setGotoPos(self.lastKnownPos)
                else
                    self:removeGotoPos()
                end
            
                if self.clip > 0 and timer.curtime() >= self.fireCD then
                    self.wep.fire(self)
                    self.fireCD = timer.curtime() + self.wep.fireCD
                    self.clip = self.clip - 1
                    self:addGestureSequence(self:lookupSequence("gesture_shoot_ar2"))
                    self.wepHolo:emitSound(self.wep.firesnd)
                else
                    if self.clip == 0 and !self.reloading then
                        self.reloading = true
                        self:addGestureSequence(self:lookupSequence("gesture_reload"))
                        timer.simple(self.wep.reltime, function()
                            self.clip = self.wep.clip
                            self.reloading = false
                        end)
                    end
                end
            else -- Cannot see, move directly to last known pos.
                if self:getPos():getDistanceSqr(self.lastKnownPos) > 40000 and !self.reachedLastKnown then
                    self:setGotoPos(self.lastKnownPos)
                else
                    if self:getGotoPos() and !self.reachedLastKnown then
                        self:removeGotoPos()
                        self.reachedLastKnown = true
                    end
                    
                    if timer.curtime() >= self.randomNavTick then
                        self.randomNavTick = timer.curtime() + 2
                        self:setGotoPos( Vector( math.random(-300, 300), math.random(-300, 300), 0 ) )
                    end
                end
                
                self:setDetection( self:getDetection() - 1 )
                
                if self:getDetection() == 0 then
                    self:setState(garEnum.UNALERTED)
                end
            end
        end
    }
    
    local garWeapons = {
        ar2 = {
            mdl = "models/weapons/w_irifle.mdl",
            clip = 30,
            reltime = 2,
            fireCD = 0.1,
            firesnd = "Weapon_AR2.NPC_Single",
            fire = function(firer)
                firer:fireBullets({
                    Attacker = firer,
                    Src = firer:getEyePos(),
                    IgnoreEntity = firer,
                    Dir = (ply:getEyePos() - firer:getEyePos()):getAngle():getForward(),
                    TracerName = "AR2Tracer",
                    Damage = 8,
                    Spread = Vector(0.1, 0.1, 0)
                })
            end
        }
    }
    
    function KBBE.spawnGuard(pos)
        local gar = nextbot.create(pos, "models/Combine_Soldier_PrisonGuard.mdl")
        gar:setHealth(100)
        gar.state = 1
        gar.randomNavTick = 0
        gar.fireCD = 0
        gar.wep = table.random(garWeapons)
        gar.wepHolo = holograms.create(Vector(), Angle(), gar.wep.mdl)
        gar.wepHolo:setParent(gar, "anim_attachment_RH")
        gar.wepHolo:addEffects(EF.BONEMERGE)
        gar.detectionNextTick = 0
        
        gar.clip = gar.wep.clip
        
        gar:addDeathCallback("death", function()
            KBBE.NPCs[gar] = nil
            gar:emitSound("NPC_CombineS.DissolveScream")
            gar.wepHolo:remove()
        end)
        
        gar.stateIdles = {
            [1] = "idle1",
            [2] = "combatidle1",
            [3] = "combatidle1"
        }
        
        gar.stateRuns = {
            [1] = "walkeasy_all",
            [2] = "runaimall1",
            [3] = "walk_all"
        }
        
        function gar:setDetection(num)
            if timer.curtime() >= self.detectionNextTick then
                local bigger = (num > self:getDTInt(1))
                self:setDTInt(1, math.clamp(num, 0, 100))
                self.detectionNextTick = timer.curtime() + (bigger and 0.02 or 0.2)
            end
        end
        
        function gar:getDetection()
            return self:getDTInt(1)
        end
        
        function gar:setState(enum)
            self.state = enum
            self:setIdleAct( self:getSequenceActivity( self:lookupSequence(self.stateIdles[enum] or "combatidle1") ) )
            self:setRunAct( self:getSequenceActivity( self:lookupSequence(self.stateRuns[enum] or "runaimall1") ) )
            self:setGotoPos(self:getPos())
            self:setMoveSpeed(enum == 1 and 100 or 200)
        end
        
        gar.visionTrig = trigger.createSphere(gar:getPos() + Vector(0, 0, 64) + (gar:getForward() * 400), 400, "player", function()
            print("entered vision trig")
            gar.plyInVis = true
        end, function()
            print("exited vision trig")
            gar.plyInVis = false
        end)
        gar.visionTrig:setParentEx(gar)
        gar:setState(garEnum.UNALERTED)
        gar:setGotoPos(gar:getPos())
        
        function gar:traceToPlayer()
            local tr = trace.line(self:getEyePos(), ply:getEyePos(), self)
            if tr.Entity then return tr.Entity == ply end
        end
        
        function gar:think()
            if self:getHealth() <= 0 then return end
            
            garStateThinkers[self.state](self)
        end
        
        KBBE.NPCs[gar] = true
    end
    
    hook.add("tick", "KBBE_HandleNPCs", function()
        for npc, _ in pairs(KBBE.NPCs) do
            npc:think()
        end
    end)

    net.receive("KBBE_SaveMap", function()
        net.readStream(function(data)
            if data then
                setUserdata(data)
                KBBE.Objs = json.decode(data)
                print("Saved map successfully!")
            else
                print("Failed to save map!")
            end
        end)
    end)
    
    net.receive("KBBE_StartSV", function()
        local ply = entity(1)
        ply:stripWeapons()
        
        local spawnPose = KBBE.Objs.PlayerSpawn
        ply:setPos(spawnPose[1])
        ply:setEyeAngles(spawnPose[2])
        
        local breenSpawn = KBBE.Objs.BreenSpawn
        KBBE.spawnBreen(breenSpawn)
        
        for _, spawn in pairs(KBBE.Objs.GuardSpawns) do
            KBBE.spawnGuard(spawn)
        end
    end)
else
    local w, h = render.getResolution()
    clrs = {
        yellow = Color("FFC800"),
        black = Color("1E212B"),
        green = Color("4D8B31"),
        orange = Color("FF8427"),
        white = Color(255, 255, 255, 255),
        none = Color(0, 0, 0, 0)
    }
    
    _G.kbbefont = render.createFont("bahnschrift semibold", h, 400, true)
    
    function KBBE.requestStartGame()
        net.start("KBBE_StartSV")
        net.send()
    end
    
    net.receive("KBBE_ExtractCL", function()
        KBBE.extractCL()
    end)
    
    function KBBE.extractCL()
        local heliSpawn = KBBE.Objs.HelicopterSpawn or {Vector(), Angle()}
    
        local heli = holograms.create(heliSpawn[1], Angle(), "models/Combine_Helicopter.mdl")
        heli:setAnimation("idle")
        heli:emitSound("vehicles/chopper_rotor2.wav")
        HGUISound("eranthis/themonsterswithin.ogg")
        
        player():unequip()
        
        ECam = {origin = Vector(), angles = Angle()}
        
        AddCoTask("ExtractCL", function()
            ECam.origin = heli:getPos() + Vector(-200, -200, -100) 
            ECam.angles = (heli:getPos() - ECam.origin):getAngle() - Angle(10, 20, 0)
            CamSetFOV(60)
            CamSetType("ExtractCutscene")
            AddCamShakeContinuous("ExtractCutscene", 2, 2)
            AddTween("HeliMoveUp", {p = heli:getPos()}, {p = heliSpawn[1] + Vector(0, 0, 200)}, 4, nil, math.easeInOutSine, function(dat)
                heli:setPos(dat.p)
            end)
            coroutine.wait(2.5)
            RemoveCamShakeContinuous("ExtractCutscene")
            ECam.origin = heliSpawn[1] + Vector(500, 0, 200)
            ECam.angles = (heli:getPos() - ECam.origin):getAngle()
            coroutine.wait(1.5)
            heli:setNoDraw(true)
            AddTween("HeliMoveForward", {p = heli:getPos()}, {p = heliSpawn[1] + Vector(1000, 0, 0)}, 4, function() heli:stopSound("vehicles/chopper_rotor2.wav") end, math.easeInSine, function(dat)
                heli:setPos(dat.p)
            end)
            
            local brholo = holograms.create(Vector(-100, 0, -200), Angle(), "models/player/breen.mdl")
            brholo:setAnimation("idle_all_scared")
            brholo:setNoDraw(true)
            local plyholo = holograms.create(Vector(-100, 100, -73), Angle(0, -30, 0), player():getModel())
            plyholo:setAnimation("pose_standing_01")
            plyholo:setNoDraw(true)
            
            local objs = {
                {type = "rect", clr = clrs.black, x = 0, y = 0, w = w, h = 0},
                {type = "rect", clr = clrs.yellow, x = 0, y = 0, w = w, h = 0},
                {type = "stext", clr = clrs.black, x = w * 0.5, y = -h * 0.5, scale = 5, vm = Matrix(), txt = "Mission Complete!", font = kbbefont, xal = 1, yal = 1},
                {type = "holo", holo = brholo, vm = {type = "3D", origin = ECam.origin, angles = Cam.angles, fov = 60}},
                {type = "holo", holo = heli, vm = {type = "3D", origin = ECam.origin, angles = Cam.angles}},
                {type = "holo", holo = plyholo, vm = {type = "3D", origin = ECam.origin, angles = Cam.angles, fov = 30}}
            }
            
            AddTween("ResultsBGDown", objs[1], {h = h}, 1.5)
            AddTween("ResultsFGDown", objs[2], {h = h}, 3, nil, math.easeOutSine)
            
            hook.add("drawhud", "KBBE_DrawResultsScreen", function()
                objs[4].vm.angles = Cam.angles
                HGDrawObjects(objs)
            end)
            
            coroutine.wait(2.3)
            AddTween("ResultsCOMPLETE", objs[3], {scale = 1, y = h * 0.2}, 0.5, nil, math.easeOutBack)
            AddTween("ResultsBreenUP", {h = -200}, {h = -73}, 1, function() 
                brholo:setAnimation("death_04")
                HGUISound("weapons/xm1014/xm1014-1.wav")
                objs[2].clr = clrs.white
                timer.simple(0.1, function() objs[2].clr = clrs.yellow end)
            end, math.easeOutSine, function(dat)
                brholo:setPos(ECam.origin + Vector(-100, 0, dat.h))
            end)
            coroutine.wait(2)
            AddTween("ResultsPlyRight", {r = -200}, {r = 10}, 1, nil, math.easeOutSine, function(dat)
                plyholo:setPos(ECam.origin + Vector(-100, dat.r, -73))
            end)
            AddTween("ResultsCompleteRight", objs[3], {x = w * 2, scale = 0}, 1, nil, math.easeInSine)
            coroutine.wait(1)
            
            table.insert(objs, {type = "stext", txt = "Summary", vm = Matrix(), font = kbbefont, scale = 0.5, xal = 0, yal = 1, x = w * 0.02, y = h * 0.2, clr = clrs.black})
            HGUISound("buttons/lever7.wav", 160)
            
            coroutine.wait(1)
                  
            local textToAdd = {
                "Enemies Killed: 0",
                "Unseen: Yes",
                "Alarm Raised: No",
                "Health Remaining: "..ply:getHealth(),
                "Grade: S"
            }
            
            for i = 1, #textToAdd do
                table.insert(objs, {type = "stext", txt = textToAdd[i], vm = Matrix(), font = kbbefont, scale = 0.2, xal = 0, yal = 1, x = w * 0.02, y = h * 0.3 + (h * 0.05 * i), clr = clrs.black})
                HGUISound("buttons/lightswitch2.wav", 130)
                coroutine.wait(0.1)
            end
            
            coroutine.wait(2)
            local cashEarnedK = table.insert(objs, {type = "stext", txt = "Credits earned: 0", vm = Matrix(), font = kbbefont, scale = 0.4, xal = 0, yal = 1, x = w * 0.02, y = h * 0.8, clr = clrs.black})
            HGUISound("ambient/machines/thumper_startup1.wav", 120)
            
            coroutine.wait(1)
            
            AddTween("ResultsCash", {cashy = 0}, {cashy = 1000}, 2, function() HGUISound("buttons/lever6.wav", 150) timer.remove("CashCountSound") end, nil, function(dat)
                objs[cashEarnedK].txt = "Credits earned: "..math.floor(dat.cashy)
            end)
            
            timer.create("CashCountSound", 0.1, 0, function()
                HGUISound("ambient/levels/prison/radio_random11.wav")
            end)
              
            coroutine.wait(3)
            input.enableCursor(true)
            local contButt = HGButton(w * 0.5 - (h * 0.2 * 0.5), h * 0.7, h * 0.2, h * 0.05, "Continue", function()
                HGClearAll()
                KBBE.doTransition(function()
                    hook.remove("drawhud", "KBBE_DrawResultsScreen")
                    heli:remove()
                    plyholo:remove()
                    brholo:remove()
                    objs = nil
                    CamSetType("FP", false)
                    KBBE.openMenu()
                end)
            end, clrs.black)
            return true
        end)
    end
    
    function KBBE.giveLoadout()
        for k, lgun in pairs(KBBE.Loadout.Guns) do
            invWeps[k] = RegisteredGuns[lgun]:new()
        end
        
        invWeps[1]:equip()
    end
    
    function KBBE.addNPCDetectionUI()
        hook.add("drawhud", "NPCDetectionUI", function()
            for v, _ in pairs(KBBE.NPCs) do
                if v:getDTInt(1) > 0 then
                    local toScr = (v:getPos() + Vector(0, 0, 80)):toScreen()
                    render.setFont("DermaLarge")
                    render.drawSimpleText(toScr.x, toScr.y, v:getDTInt(1), 1, 1)
                end
            end
        end)    
    end

    function KBBE.openMenu()
        local p = HGButton(0, h * 0.4, h * 0.7, h * 0.1, "Play", function()
            input.enableCursor(false)
            HGClearAll()
            KBBE.doTransition(function()
                KBBE.requestStartGame()
                KBBE.giveLoadout()
                KBBE.addNPCDetectionUI()
            end)
        end, clrs.black)
        
        local l = HGButton(0, h * 0.5, h * 0.7, h * 0.1, "Loadout", function()
        
        end, clrs.black)
        
        local e = HGButton(0, h * 0.6, h * 0.7, h * 0.1, "Edit", function()
            input.enableCursor(false)
            HGClearAll()
            KBBE.doTransition(KBBE.editMode)
        end, clrs.black)
        
        input.enableCursor(true)
        p:makePopup()
        l:makePopup()
        e:makePopup()
    end
    
    function KBBE.doIntro()
        
    end
    
    net.receive("KBBE_BreenDeadCL", function()
        local arriveTime = net.readInt(8)
    
        KBBE.startCLTimer(arriveTime)
        KBBE.breenKillAnim()
    end)
    
    function KBBE.startCLTimer(time)
        local objs = {
            {type = "stext", x = w * 0.5, y = h * 0.5, txt = "HELICOPTER ARRIVES IN: "..time, vm = Matrix(), clr = clrs.white, font = kbbefont, xal = 1, yal = 1, scale = 0.6}
        }
        
        timer.create("heliCLTimer", time, 1, function()
            hook.remove("drawhud", "KBBECLTimer")
            objs = nil
        end)
        
        hook.add("drawhud", "KBBECLTimer", function()
            objs[1].txt = "HELICOPTER ARRIVES IN: "..(math.ceil(timer.timeleft("heliCLTimer")) or "0")
            HGDrawObjects(objs)
        end)
        
        timer.simple(1, function()
            AddTween("TimerMoveToTop", objs[1], {y = h * 0.1, scale = 0.2}, 1, nil, math.easeInOutSine)
        end)
    end
    
    function KBBE.breenKillAnim()
        local m = Matrix()
        m:setTranslation(Vector(0, h * 0.4, 0))
    
        local objs = {
            {type = "texRect", x = w * 0.5 - (h * 0.05), y = h * 0.7, w = h * 0.1, h = h * 0.1, mat = material.load("models/props_combine/combine_interface_disp")},
            {type = "texRectUV", x = w * 0.5 - (h * 0.05), y = h * 0.7, w = h * 0.05, h = h * 0.1, UV = {0, 0, 0.5, 1}, mat = material.createFromImage("spawnicons/models/player/breen.png", "smooth"), clr = Color(), scis = {w * 0.5 - (h * 0.05), h * 0.7, w * 0.5 - (h * 0.05) + h * 0.1, h * 0.8} },
            {type = "texRectUV", x = w * 0.5, y = h * 0.7, w = h * 0.05, h = h * 0.1, UV = {0.5, 0, 1, 1}, mat = material.createFromImage("spawnicons/models/player/breen.png", "smooth"), clr = Color(), scis = {w * 0.5 - (h * 0.05), h * 0.7, w * 0.5 - (h * 0.05) + h * 0.1, h * 0.8} },
            {type = "rectOutline", x = w * 0.5 - (h * 0.05), y = h * 0.7, w = h * 0.1, h = h * 0.1, thick = 4, clr = clrs.black},
            {type = "stext", x = w * 0.5, y = h * 0.7 - (h * 0.05), txt = "Breen Killed", scale = 0.2, vm = Matrix(), clr = clrs.black, xal = 1, yal = 1, font = kbbefont}
        }
        
        hook.add("postdrawhud", "KBBEBreenDeathAnim", function()
            render.pushMatrix(m)
            HGDrawObjects(objs)
            render.popMatrix(m)
        end)
        
        AddCoTask("KBBEBreenKillAnim", function()
            AddTween("KillAnimMoveMatrix", {p = Vector(0, h * 0.4, 0)}, {p = Vector()}, 1, nil, math.easeOutSine, function(dat) m:setTranslation(dat.p) end)
            coroutine.wait(1.2)
            local dedC = Color(255, 0, 0)
            objs[1].mat = material.load("models/weapons/v_slam/new light1")
            objs[2].clr = dedC
            objs[3].clr = dedC
            AddTween("CutBreenLeft", objs[2], {x = w * 0.5 - (h * 0.05) - 10, y = h * 0.7 + 10}, 0.5, nil, math.easeOutSine)
            AddTween("CutBreenRight", objs[3], {x = w * 0.5 + 10, y = h * 0.7 + 10}, 0.5, nil, math.easeOutSine)
            HGUISound("ambient/machines/floodgate_stop1.wav")
            coroutine.wait(2)
            AddTween("KillAnimMoveMatrix", {p = Vector()}, {p = Vector(0, h * 0.4, 0)}, 1, nil, math.easeInSine, function(dat) m:setTranslation(dat.p) end)
            coroutine.wait(1)
            hook.remove("postdrawhud", "KBBEBreenDeathAnim")
            objs = nil
            m = nil
            return true
        end)
    end
    
    function KBBE.doTransition(midFunc)
        local objs = {
            {type = "rect", x = 0, y = 0, w = 0, h = h, clr = clrs.black},
            {type = "rect", x = 0, y = 0, w = 0, h = h, clr = clrs.yellow},
            {type = "stext", x = w * 0.5, y = h * 0.5, txt = "K.B.B.E.", scale = 2, vm = Matrix(), clr = clrs.black, xal = 1, yal = 1, font = kbbefont, scis = {0, 0, 0, h}}
        }
        
        AddCoTask("KBBETransition", function()
            AddTween("KBBETransStartBG", objs[1], {w = w}, 1)
            AddTween("KBBETransStartFG", objs[2], {w = w}, 1.5, nil, math.easeInOutSine)
            AddTween("KBBETransStartText", objs[3].scis, {[3] = w}, 1.5, nil, math.easeInOutSine)
            HGUISound("doors/doormove2.wav")
            HGUISound("ambient/machines/combine_terminal_idle4.wav")
            coroutine.wait(2)
            if midFunc then midFunc() end
            HGUISound("weapons/awp/awp_bolt.wav")
            coroutine.wait(1)
            AddTween("KBBETextGrow", objs[3], {scale = 4}, 0.2, nil, math.easeRecoilSpike)
            objs[2].clr = Color()
            AddTween("KBBEBGFlash", objs[2].clr, {r = clrs.yellow.r, g = clrs.yellow.g, b = clrs.yellow.b}, 1)
            HGUISound("weapons/awp/awp1.wav")
            coroutine.wait(1)
            AddTween("KBBETransEndBG", objs[1], {x = w}, 1.5, nil, math.easeInOutSine)
            AddTween("KBBETransEndFG", objs[2], {x = w}, 1)
            AddTween("KBBETransEndText", objs[3].scis, {[1] = w}, 1)
            HGUISound("doors/door_metal_gate_move1.wav")
            coroutine.wait(1.5)
            hook.remove("postdrawhud", "KBBETransition")
            objs = nil
            return true
        end)
    
        hook.add("postdrawhud", "KBBETransition", function()
            HGDrawObjects(objs)
        end)
    end
    
    function KBBE.createEditHolo(pos, mdl)
        KBBE.editHolos = KBBE.editHolos or {}
        table.insert(KBBE.editHolos, holograms.create(pos, Angle(), mdl or "models/editor/air_node_hint.mdl"))
    end
    
    function KBBE.editMode()
        local bfr = vgui.createFrame()
        bfr:setTitle("KBBE DevMenu")
        bfr:setSize(300, 100)
        bfr:center()
        bfr:parentToContextMenu()
        bfr:setMouseInputEnabled(true)
        bfr:setSizable(true)
        
        local fr = vgui.createScrollPanel(bfr)
        fr:dock(1)
        
        local sps = vgui.createButton(fr)
        sps:setText("Set Player Spawn")
        sps:dock(4)
        sps:onClick(function()
            KBBE.Objs.PlayerSpawn = {player():getPos(), player():getEyeAngles()}
        end)
        
        local sbs = vgui.createButton(fr)
        sbs:setText("Set Breen Spawn")
        sbs:dock(4)
        sbs:onClick(function()
            KBBE.Objs.BreenSpawn = player():getPos()
        end)
        
        local shs = vgui.createButton(fr)
        shs:setText("Set Helicopter Spawn")
        shs:dock(4)
        shs:onClick(function()
            KBBE.Objs.HelicopterSpawn = {player():getPos(), player():getEyeAngles()}
        end)
        
        local ags = vgui.createButton(fr)
        ags:setText("Add Guard Spawn")
        ags:dock(4)
        ags:onClick(function()
            local tr = player():getEyeTrace()
            table.insert(KBBE.Objs.GuardSpawns, tr.HitPos)
            KBBE.createEditHolo(tr.HitPos, "models/editor/playerstart.mdl")
        end)
        
        local save = vgui.createButton(fr)
        save:setText("Save and exit")
        save:dock(4)
        save:onClick(function()
            bfr:remove()
            KBBE.openMenu()
            
            for _, v in pairs(KBBE.editHolos) do
                v:remove()
            end
            table.empty(KBBE.editHolos)
            
            net.start("KBBE_SaveMap")
            net.writeStream(json.encode(KBBE.Objs))
            net.send()
        end)
    end
    
    hook.add("createclientsideragdoll", "handlebreendeathragdoll", function(owner, rag)
        KBBE.NPCs[owner] = nil
        if rag:getModel() == "models/player/breen.mdl" then
            _G.breenBody = rag
            _G.breenBodyCamPos = rag:getBonePosition(6) + Vector( math.random(-64, 64), math.random(-64, 64), 64 )
            AddCoTask("BreenKillCam", function()
                local eqwep = player().equippedWeapon
                player():unequip()
                HGUISound("ui/freeze_cam.wav")
                HGUISound("eranthis/contusion.ogg")
                CamSetTypeSmooth("FocusBreenBody", 1, math.easeInSine)
                CamTweenFOV(60, 0.5, math.easeInOutSine)
                AddCamShakeContinuous("BreenBody", 2, 4)
                coroutine.wait(3)
                CamSetTypeSmooth("FP", 1, math.easeInSine)
                CamTweenFOV(CamDefaultFOV, 0.2, math.easeInSine)
                RemoveCamShakeContinuous("BreenBody")
                coroutine.wait(1)
                eqwep:equip()
                return true
            end)
        end
    end)
    
    hook.add("OnEntityCreated", "HandleNPCSpawnCL", function(ent)
        if ent:getClass() == "starfall_cnextbot" then
            KBBE.NPCs[ent] = true
        end
    end)
    
    local inputSw = {
        [18] = function()
            if player().equippedWeapon then
                player():unequip()        
            end 
        end
    }
    
    hook.add("inputPressed", "handleCLInputs", function(but)
        if inputSw[but] then inputSw[but]() end
    end)
end

