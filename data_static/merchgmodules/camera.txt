
enableHud(player(), true)

function table.sumVector(tbl)
    local sum = Vector(0)
    for _, val in pairs(tbl) do
        sum = sum + val
    end
    return sum
end

function table.sumAngle(tbl)
    local sum = Angle(0)
    for _, val in pairs(tbl) do
        sum = sum + val
    end
    return sum
end

local tempty = table.isEmpty
local ply = player()

_G.CamDefaultFOV = convar.getInt("fov_desired")
_G.CamViewerTypes = {
    Uncoupled = true,
    FP = false,
    TPS = true
}

_G.CamTypes = {
    FP = function(trans, pos, ang, fov, znear, zfar)
        if !trans then
            Cam.origin = pos
            Cam.angles = ang
            
            if !tempty(Cam.PosOffsets) then
                Cam.origin = ply:getEyePos() + table.sumVector(Cam.PosOffsets)
            end
            
            if !tempty(Cam.AngOffsets) then
                Cam.angles = ply:getEyeAngles() + table.sumAngle(Cam.AngOffsets)
            end
        else
            return ply:getEyePos(), ply:getEyeAngles()
        end
    end,
    
    TPS = function(trans, pos, ang, fov, znear, zfar)
        local tr = trace.line(ply:getEyePos(), ply:getEyePos() - ply:getAimVector() * 60 + ply:getRight() * 16, ply)
        
        if !trans then
            Cam.origin = tr.HitPos
            Cam.angles = ang
            
            if !tempty(Cam.PosOffsets) then
                Cam.origin = tr.HitPos + table.sumVector(Cam.PosOffsets)
            end
            
            if !tempty(Cam.AngOffsets) then
                Cam.angles = ang + table.sumAngle(Cam.AngOffsets)
            end
        else
            return tr.HitPos, eyeAngles()
        end
    end,
    
    Uncoupled = function(trans, pos, ang, fov, znear, zfar)
        if !trans then
            Cam.origin = Cam.UncoupPos + table.sumVector(Cam.PosOffsets)
            Cam.angles = Cam.UncoupAng + table.sumAngle(Cam.AngOffsets)
        else
            return Cam.UncoupPos, Cam.UncoupAng
        end
    end
}

_G.Cam = {Type = CamTypes.FP, PosOffsets = {}, AngOffsets = {}, angles = Angle(), fov = CamDefaultFOV, UncoupPos = Vector(), UncoupAng = Angle()}

function AddCamera()
    hook.add("calcview", "HGCamera", function(pos, ang, fov, znear, zfar)
        if Cam.Type then
            Cam.Type(false, pos, ang, fov, znear, zfar)
        else
            Cam.angles = Cam.angles + table.sumAngle(Cam.AngOffsets)
        end
        return Cam
    end)
end

function StopCamera()
    hook.add("calcview", "HGCamera")
end

function CamSetFOV(num)
    Cam.fov = num
end

function CamTweenFOV(num, dur, ease)
    if !AddTween then print("Tween module is needed for CamTweenFOV!") return end
    
    RemoveTween("CamTweenFOV")
    AddTween("CamTweenFOV", Cam, {fov = num}, dur, nil, ease)
end

function CamUncouple()
    Cam.Type = CamTypes.Uncoupled
end

function CamTween(pos, ang, dur, ease)
    if !AddTween then print("Tween module is needed for CamTween!") return end
    Cam.UncoupPos = Cam.origin
    Cam.UncoupAng = Cam.angles
    CamUncouple()
    
    RemoveTween("CamTween") -- Remove old one just to be sure
    AddTween("CamTween", Cam, {UncoupPos = pos, UncoupAng = ang}, dur, nil, ease)
end

function CamSetPos(pos)
    CamUncouple()
    Cam.UncoupPos = pos
end

function CamSetAng(ang)
    CamUncouple()
    Cam.UncoupAng = ang
end

function CamSetPose(pos, ang)
    CamUncouple()
    Cam.UncoupPos = pos
    Cam.UncoupAng = ang
end

function CamSetType(id)
    if !CamTypes[id] then print("No such cam type!") return end
    RemoveTween("CamTweenType")
    
    Cam.Type = CamTypes[id]
    
    if CamViewerTypes[id] then CamDrawViewer(CamViewerTypes[id]) end
end

function CamSetTypeSmooth(id, dur, ease, easeang)
    if !CamTypes[id] then print("No such cam type!") return end
    if !AddTween then print("Tween module is needed for CamSetTypeSmooth!") return end
     
    dur = dur or 1
    ease = ease or math.easeInOutSine
    local lastType = Cam.Type
    Cam.Type = nil
    
    local function endfunc()
        Cam.Type = CamTypes[id]
        if CamViewerTypes[id] then
            CamDrawViewer(CamViewerTypes[id])
        end
    end
    
    AddTween("CamTweenType", {cyc = 0}, {cyc = 1}, dur, endfunc, nil, function(data)
        local startPos, startAng = lastType(true)
        local desiredPos, desiredAng = CamTypes[id](true)
        Cam.origin = math.lerpVector(ease(data.cyc), startPos, desiredPos)
        Cam.angles = math.lerpAngle(easeang and easeang(data.cyc) or ease(data.cyc), startAng, desiredAng)
    end)
end

function CamDrawViewer(en)
    Cam.drawviewer = en
end

function CamRegisterType(id, func, drawv)
    CamTypes[id] = func
    if drawv then
        CamViewerTypes[id] = drawv
    end
end

local function getShakeFloat(seed, freq)
    return perlin:noise(seed, (timer.curtime() * freq ) - 0.5, 0) * 2
end

function CamShake(freq, intensity, dur, ease, roll)
    local id = "CamShake_"..timer.curtime()..freq..intensity..dur
    
    Cam.AngOffsets[id] = Angle()
    
    AddTween(id, Cam.AngOffsets, {[id] = Angle(0, 0, 1)}, dur, function() Cam.AngOffsets[id] = nil end, ease or math.easeLinearSpike, function(dat)
        local nResult = getShakeFloat(1, freq)
        local nResult2 = getShakeFloat(10, freq)
        local nResult3 = (roll and getShakeFloat(100, freq) or 0)
        dat[id] = Angle(nResult * intensity * Cam.AngOffsets[id].r, nResult2 * intensity * Cam.AngOffsets[id].r, nResult3 * intensity * Cam.AngOffsets[id].r)
    end)
end

function CamSetViewBob(bobfunc)
    Cam.PosOffsets["viewbob"] = Vector()
    Cam.AngOffsets["viewbob"] = Angle()

    hook.add("think", "CamHandleViewBob", function()
        local pos, ang = bobfunc()
         
        Cam.PosOffsets.viewbob = math.lerpVector(0.1, Cam.PosOffsets.viewbob, pos)
        Cam.AngOffsets.viewbob = math.lerpAngle(0.1, Cam.AngOffsets.viewbob, ang)
    end)
end

function CamRemoveViewBob()
    hook.remove("think", "CamHandleViewBob")
    Cam.PosOffsets.viewbob = nil
    Cam.AngOffsets.viewbob = nil
end

function AddCamShakeContinuous(id, freq, intensity)
    RemoveTween("CamShakeContinuousSmoothEnd_"..id)
    local id = "CamShakeContinuous_"..id
    
    Cam.AngOffsets[id] = Angle()
    
    Cam.ContinuousShakes = Cam.ContinuousShakes or {}
    
    if tempty(Cam.ContinuousShakes) then
        hook.add("think", "CamHandleContinuousShakes", function()
            for id, v in pairs(Cam.ContinuousShakes) do
                Cam.AngOffsets[id] = Angle( getShakeFloat(1, v.freq) * v.intensity, getShakeFloat(10, v.freq) * v.intensity, getShakeFloat(100, v.freq) * v.intensity )
            end
        end)
    end
    
    Cam.ContinuousShakes[id] = {
        freq = freq,
        intensity = 0,
        aint = aint or Angle(1, 1, 1)
    }
    
    AddTween("CamShakeContinuousSmoothStart_"..id, Cam.ContinuousShakes[id], {intensity = intensity}, 0.5)
end

function RemoveCamShakeContinuous(id)
    local rid = "CamShakeContinuous_"..id

    RemoveTween("CamShakeContinuousSmoothStart_"..id)

    AddTween("CamShakeContinuousSmoothEnd_"..id, Cam.ContinuousShakes[rid], {intensity = 0}, 0.5, function()
        Cam.ContinuousShakes[rid] = nil
        Cam.AngOffsets[rid] = nil
        
        if tempty(Cam.ContinuousShakes) then
            hook.remove("think", "CamHandleContinuousShakes")
        end
    end)
end

function CamPosPunch(xyz, ease, dur)
    if !AddTween then print("Tween module is needed for CamPosPunch!") return end

    ease = ease or math.easeSineSpike
    dur = dur or 1
    
    local id = "CamPosPunch_"..xyz.x..xyz.y..xyz.z
    Cam.PosOffsets[id] = Vector()
    
    AddTween(id, Cam.PosOffsets, {[id] = xyz}, dur, function() Cam.PosOffsets[id] = nil end, ease)
end

function CamAngPunch(pyr, ease, dur)
    if !AddTween then print("Tween module is needed for CamAngPunch!") return end

    ease = ease or math.easeSineSpike
    dur = dur or 1
    
    local id = "CamAngPunch_"..timer.curtime()..pyr.p..pyr.y..pyr.r
    Cam.AngOffsets[id] = Angle()
    
    AddTween(id, Cam.AngOffsets, {[id] = pyr}, dur, function() Cam.AngOffsets[id] = nil end, ease)
end

