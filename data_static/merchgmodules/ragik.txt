RagIK = {}

if SERVER then

    function RagIK.create(handMdl)
        if RagIK.ActiveRagdoll then print("Tried to create RagIK twice") return end

        RagIK.ActiveRagdoll = prop.createRagdoll("models/breen.mdl", true)

        local rag = RagIK.ActiveRagdoll
        rag:setSaveValue("m_ragdoll.allowStretch", true)
        rag:setSolid(false)
        rag:setMaterial("particle/warp1_warp")

        for i = 0, rag:getPhysicsObjectCount() - 1 do
            local po = rag:getPhysicsObjectNum(i)

            po:setPos(chip():getPos() + Vector(0, 0, 100))
        end

        local trans = rag:translateBoneToPhysBone(rag:lookupBone("ValveBiped.Bip01_R_Forearm"))
        local trans2 = rag:translateBoneToPhysBone(rag:lookupBone("ValveBiped.Bip01_R_Upperarm"))
        local trans3 = rag:translateBoneToPhysBone(rag:lookupBone("ValveBiped.Bip01_R_Hand"))

        local ltrans = rag:translateBoneToPhysBone(rag:lookupBone("ValveBiped.Bip01_L_Forearm"))
        local ltrans2 = rag:translateBoneToPhysBone(rag:lookupBone("ValveBiped.Bip01_L_Upperarm"))
        local ltrans3 = rag:translateBoneToPhysBone(rag:lookupBone("ValveBiped.Bip01_L_Hand"))

        rag:getPhysicsObjectNum(trans):enableMotion(true)
        rag:getPhysicsObjectNum(trans2):enableMotion(true)

        rag:getPhysicsObjectNum(ltrans):enableMotion(true)
        rag:getPhysicsObjectNum(ltrans2):enableMotion(true)

        local ignoreBones = {[2] = true, [6] = true, [7] = true, [5] = true, [4] = true, [3] = true}
        local first = true

        net.start("RagIKCreateFakeHands")
        net.writeEntity(rag)
        net.send(entity(1))

        hook.add("think", "RagIKThink", function()
            for i = 0, rag:getPhysicsObjectCount() - 1 do
                local po = rag:getPhysicsObjectNum(i)
                if ignoreBones[i] and not first then continue end

                local yawgs = owner():getEyeAngles()
                rag:getPhysicsObjectNum(0):setAngles(yawgs + Angle(0, 90, 90))
                rag:getPhysicsObjectNum(1):setAngles(yawgs + Angle(-90, 0, -90))
                po:setPos(owner():getPos() + Vector(0, 0, 45) - owner():getAimVector() * 15)
            end

            if first then first = false end

            local trleft, trright
            if RagIK.RightPos then
                local lookAt = (RagIK.RightPos - ply:getEyePos()):getAngle():getForward()
                trright = trace.line(ply:getEyePos(), ply:getEyePos() + lookAt * math.min(ply:getEyePos():getDistance(RagIK.RightPos), 24), ply, 0)
            end

            if RagIK.LeftPos then
                local lookAt = (RagIK.LeftPos - ply:getEyePos()):getAngle():getForward()
                trleft = trace.line(ply:getEyePos(), ply:getEyePos() + lookAt * math.min(ply:getEyePos():getDistance(RagIK.LeftPos), 24), ply, 0)
            end

            rag:getPhysicsObjectNum(trans3):setPos(trright and trright.HitPos or RagIK.getRightDefPos())
            rag:getPhysicsObjectNum(trans3):wake()
            rag:getPhysicsObjectNum(trans3):setAngles(RagIK.RightAngle or Angle(-90, 90, 0))

            rag:getPhysicsObjectNum(ltrans3):setPos(trleft and trleft.HitPos or RagIK.getLeftDefPos())
            rag:getPhysicsObjectNum(ltrans3):wake()
            rag:getPhysicsObjectNum(ltrans3):setAngles(RagIK.LeftAngle or Angle(-90, 90, 0))
        end)
    end

    function RagIK.setRightPos(pos)
        RagIK.RightPos = pos
    end

    function RagIK.setLeftPos(pos)
        RagIK.LeftPos = pos
    end

    function RagIK.setRightAngle(ang)
        RagIK.RightAngle = ang
    end

    function RagIK.setLeftAngle(ang)
        RagIK.LeftAngle = ang
    end

    function RagIK.getRightHand()
        return RagIK.ActiveRagdoll:getPhysicsObjectNum(7)
    end

    function RagIK.getLeftHand()
        return RagIK.ActiveRagdoll:getPhysicsObjectNum(5)
    end

    function RagIK.getRightDefPos()
        return entity(1):getEyePos() - Vector(0, 0, 30) + entity(1):getRight() * 10 + entity(1):getForward() * -10
    end

    function RagIK.getLeftDefPos()
        return entity(1):getEyePos() - Vector(0, 0, 30) + entity(1):getRight() * -10 + entity(1):getForward() * -10
    end

    function RagIK.setRightFingerPose(str)
        net.start("RIKRightFingerPoseSV")
        net.writeString(str)
        net.send(find.allPlayers())
    end

    function RagIK.setLeftFingerPose(str)
        net.start("RIKLeftFingerPoseSV")
        net.writeString(str)
        net.send(find.allPlayers())
    end

    function RagIK.clearPose()
        RagIK.RightPos = nil
        RagIK.RightAngle = nil
        RagIK.LeftPos = nil
        RagIK.LeftAngle = nil
    end

    function RagIK.remove()
        hook.remove("think", "RagIKThink")

        if isValid(RagIK.ActiveRagdoll) then
            RagIK.ActiveRagdoll:remove()
        end

        RagIK.clearPose()

        RagIK.ActiveRagdoll = nil
    end
else
    _G.RagIKFingerPoses = {}

    function RagIK.registerFingerPose(id, str)
        RagIKFingerPoses[id] = json.decode(str)
    end

    RagIK.registerFingerPose("GrabEdgeFlat", [[{"4":"{12 44 0}","01":"{-4 -50 0}","31":"{0 18 0}","21":"{0 12 0}","41":"{0 20 0}","22":"{0 8 0}","32":"{0 24 0}","11":"{0 12 0}","12":"{0 2 0}","3":"{8 32 0}","02":"{0 0 0}","2":"{4 28 0}","1":"{2 28 0}","42":"{0 14 0}","0":"{0 -4 0}"}]])
    RagIK.registerFingerPose("GrabRound", [[{"4":"{-18 -4 0}","01":"{24 12 0}","31":"{0 -42 0}","21":"{0 -50 0}","41":"{0 -16 0}","22":"{0 -50 0}","32":"{0 -50 0}","11":"{0 -50 0}","12":"{0 -50 0}","3":"{-12 -16 0}","02":"{2 0 0}","2":"{-10 -32 0}","1":"{0 -30 0}","42":"{0 -50 0}","0":"{-26 4 0}"}]])

    function RagIK.setRightFingerPose(id)
        if not RagIKHands then return end
        if not RagIKFingerPoses[id] then return end

        for boneID, ang in pairs(RagIKFingerPoses[id]) do
            RagIKHands:manipulateBoneAngles( RagIKHands:lookupBone("valvebiped.bip01_r_finger"..boneID), ang )
        end
    end

    function RagIK.setLeftFingerPose(id)
        if not RagIKHands then return end
        if not RagIKFingerPoses[id] then return end

        for boneID, ang in pairs(RagIKFingerPoses[id]) do
            RagIKHands:manipulateBoneAngles( RagIKHands:lookupBone("valvebiped.bip01_l_finger"..boneID), ang )
        end
    end

    net.receive("RIKRightFingerPoseSV", function()
        RagIK.setRightFingerPose(net.readString())
    end)

    net.receive("RIKLeftFingerPoseSV", function()
        RagIK.setLeftFingerPose(net.readString())
    end)

    net.receive("RagIKCreateFakeHands", function()
        net.readEntity(function(ent)
            if not ent or not isValid(ent) then return end
            RagIKHands = ent
            RagIKHands:setupBones()

            local hands = hologram.create(Vector(), Angle(), getModelHands(player():getModel()).model)
            hands:setParentEx(ent, nil, 2)
            hands:addEffects(EF.BONEMERGE)

            AddCoTask("RemoveIKRAGHANDSONREMOVEAAh", function()
                while isValid(hands:getParent()) do
                    coroutine.yield()
                end

                hands:remove()

                return true
            end)
        end)
    end)
end